# Doxyfile

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------

# The PROJECT_NAME tag is a single word (or a sequence of words surrounded 
# by quotes) that should identify the project.

PROJECT_NAME           = cpp-boilerplate


# The PROJECT_NUMBER tag can be used to enter a project or revision number. 
# This could be handy for archiving the generated documentation or if some 
# version control system is used.

# PROJECT_NUMBER         = 0.0.1


# With the PROJECT_LOGO tag one can specify a logo or an icon that is included 
# in the documentation. The maximum height of the logo should not exceed 55 
# pixels and the maximum width should not exceed 200 pixels. Doxygen will copy 
# the logo to the output directory.

# PROJECT_LOGO           = "PROJETO.JPEG|JPG|PNG|SVG"


# Using the PROJECT_BRIEF tag one can provide an optional one line description
# for a project that appears at the top of each page and should give viewer a
# quick idea about the purpose of the project. Keep the description short.

PROJECT_BRIEF          = "Descrição..."


# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
# base path where the generated documentation will be put. 
# If a relative path is entered, it will be relative to the location 
# where doxygen was started. If left blank the current directory will be used.

OUTPUT_DIRECTORY       = doc

# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen 
# will interpret the first line (until the first dot) of a JavaDoc-style 
# comment as the brief description. If set to NO, the JavaDoc 
# comments will behave just like regular Qt-style comments 
# (thus requiring an explicit @brief command for a brief description.)

JAVADOC_AUTOBRIEF      = YES

# The TAB_SIZE tag can be used to set the number of spaces in a tab. 
# Doxygen uses this value to replace tabs by spaces in code fragments.

TAB_SIZE               = 4


# If you use STL classes (i.e. std::string, std::vector, etc.) but do not
# want to include (a tag file for) the STL sources as input, then you should
# set this tag to YES in order to let doxygen match functions declarations 
# and definitions whose arguments contain STL classes (e.g. func(std::string);
# versus func(std::string) {}). This also make the inheritance and
# collaboration diagrams that involve STL classes more complete and accurate.

BUILTIN_STL_SUPPORT    = NO


# If you use Microsoft's C++/CLI language, you should set this option to 
# YES to enable parsing support.

CPP_CLI_SUPPORT        = NO


#---------------------------------------------------------------------------
# Build related configuration options
#---------------------------------------------------------------------------

# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in 
# documentation are documented, even if no documentation was available. 
# Private class members and static file members will be hidden unless 
# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES

EXTRACT_ALL            = YES

# If the EXTRACT_PRIVATE tag is set to YES all private members of a class 
# will be included in the documentation.

EXTRACT_PRIVATE        = NO

# If the EXTRACT_STATIC tag is set to YES all static members of a file 
# will be included in the documentation.

EXTRACT_STATIC         = YES


#---------------------------------------------------------------------------
# configuration options related to the input files
#---------------------------------------------------------------------------

# The INPUT tag can be used to specify the files and/or directories that contain 
# documented source files. You may enter file names like "myfile.cpp" or 
# directories like "/usr/src/myproject". Separate the files or directories 
# with spaces.

INPUT                  = .


# If the value of the INPUT tag contains directories, you can use the 
# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank the following patterns are tested: 
# *.c *.cc *.cxx *.cpp *.c++ *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh *.hxx 
# *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.py *.f90

FILE_PATTERNS          = *.c \
                         *.cpp \
                         *.h \
                         *.hpp \

# The RECURSIVE tag can be used to turn specify whether or not subdirectories 
# should be searched for input files as well. Possible values are YES and NO. 
# If left blank NO is used.

RECURSIVE              = YES


# The EXCLUDE tag can be used to specify files and/or directories that should
# be excluded from the INPUT source files. This way you can easily exclude a
# subdirectory from a directory tree whose root is specified with the INPUT 
# tag. Note that relative paths are relative to the directory from which
# doxygen is run.

EXCLUDE                = doc


#---------------------------------------------------------------------------
# Configuration options related to the HTML output
#---------------------------------------------------------------------------

# If the GENERATE_HTML tag is set to YES, doxygen will generate HTML output

GENERATE_HTML          = YES


# The HTML_HEADER tag can be used to specify a user-defined HTML header
# file for each generated HTML page. If the tag is left blank doxygen
# will generate a standard header. To get valid HTML the header file
# that includes any scripts and style sheets that doxygen needs, which
# is dependent on the configuration options used (e.g. the setting
# GENERATE_TREEVIEW). It is highly recommended to start with a default
# header using 

# HTML_HEADER            = doc/config/header.html


# The HTML_FOOTER tag can be used to specify a user-defined HTML footer
# for each generated HTML page. If the tag is left blank doxygen will
# generate a standard footer. See HTML_HEADER for more information on 
# how to generate a default footer and what special commands can be
# used inside the footer. See also section Doxygen usage for information
# on how to generate the default footer that doxygen normally uses.

# HTML_FOOTER            = doc/config/footer.html


# The HTML_STYLESHEET tag can be used to specify a user-defined cascading
# style sheet that is used by each HTML page. It can be used to fine-tune
# the look of the HTML output. If left blank doxygen will generate a 
# default style sheet.

# HTML_STYLESHEET        = doc/config/custom.css


# The HTML_EXTRA_FILES tag can be used to specify one or more extra images
# or other source files which should be copied to the HTML output directory.
# Note that these files will be copied to the base HTML output directory.
# Use the $relpath^ marker in the HTML_HEADER and/or HTML_FOOTER files to
# load these files. In the HTML_STYLESHEET file, use the file name only.
# Also note that the files will be copied as-is; there are no commands or
# markers available.

# HTML_EXTRA_FILES       = 


#---------------------------------------------------------------------------
# configuration options related to the LaTeX output
#---------------------------------------------------------------------------

# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will 
# generate Latex output.

GENERATE_LATEX         = NO
